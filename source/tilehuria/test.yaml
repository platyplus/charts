---
# Source: tilehuria/charts/frontend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-frontend
  labels:
    helm.sh/chart: frontend-0.1.0
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-hasura
  labels:
    helm.sh/chart: hasura-0.1.0
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tilehuria/charts/hasura-backend-plus/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.13
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: RELEASE-NAME-minio
---
# Source: tilehuria/charts/hasura-backend-plus/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.1.0
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tilehuria/charts/hooks/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-hooks
  labels:
    helm.sh/chart: hooks-0.1.0
    app.kubernetes.io/name: hooks
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tilehuria/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-rabbitmq
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: RELEASE-NAME-rabbitmq
---
# Source: tilehuria/charts/worker/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-worker
  labels:
    helm.sh/chart: worker-0.1.0
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: "RELEASE-NAME"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "PHNlY3JldC1wb3N0Z3Jlc3FsLXBhc3N3b3JkPg=="
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/hasura-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-hasura
type: Opaque
data:
    hasuraAdminSecret: PGxvbmcgY29tcGxpY2F0ZWQgYWRtaW4ga2V5Pg==
    jwt.key: PGxvbmcgY29tcGxpY2F0ZWQgand0IGtleT4=
    # scrappy, but it works
    jwt.secret: J3sidHlwZSI6ICI8bG9uZyBjb21wbGljYXRlZCBqd3Qga2V5PiIsICJrZXkiOiAiPGxvbmcgY29tcGxpY2F0ZWQgand0IGtleT4ifSc=
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/postgresql-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
type: Opaque
data:
    postgresql-password: PHNlY3JldC1wb3N0Z3Jlc3FsLXBhc3N3b3JkPg==
    url: cG9zdGdyZXM6Ly9wb3N0Z3Jlczo8c2VjcmV0LXBvc3RncmVzcWwtcGFzc3dvcmQ+QFJFTEVBU0UtTkFNRS1wb3N0Z3Jlc3FsOjU0MzIvdGlsZWh1cmlh
---
# Source: tilehuria/charts/hasura-backend-plus/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.13
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  access-key: "PG1pbmlvLWFjY2Vzcy1rZXk+"
  secret-key: "PG1pbmlvLXNlY3JldC1rZXk+"
---
# Source: tilehuria/charts/hasura-backend-plus/templates/do-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: digitalocean-dns
  namespace: cert-manager
data:
  access-token: ZjMzZjg5MTJiYzBlNWU5YzYzNjlmYzgwMTY0NzMyMWE5NjBjMWZhYWY1ZjA2MjUwMWVlZWZjZjcxN2FjNjAwMQ==
---
# Source: tilehuria/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-rabbitmq
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "PHNlY3JldC1yYWJiaXRtcS1wYXNzd29yZD4="
  rabbitmq-erlang-cookie: "TjB0NnNTUVNuWXFSTVRIZUF1YzI1U25QbEZBR0Noc0w="
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-hasura
  namespace: default
data:
  jwt.algorithm: HS256
  endpoint: "http://RELEASE-NAME-hasura/v1/graphql"
---
# Source: tilehuria/charts/hasura-backend-plus/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME
  namespace: default
data:
  serverUrl: "https://tilehuria.platyplus.io"
---
# Source: tilehuria/charts/hasura-backend-plus/templates/minio-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-minio
  namespace: default
data:
  defaultBuckets: tilehuria
  endpoint: "http://RELEASE-NAME-minio:9000"
---
# Source: tilehuria/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rabbitmq-config
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    default_user = user
    default_pass = CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #disk_free_limit.absolute = 50MB
    #management.load_definitions = /app/load_definition.json
---
# Source: tilehuria/templates/rabbitmq-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rabbitmq
  namespace: default
data:
  endpoint: "http://RELEASE-NAME-minio:9000"
  username: user
---
# Source: tilehuria/charts/hasura-backend-plus/charts/minio/templates/pvc-standalone.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.13
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: tilehuria/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-rabbitmq-endpoint-reader
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: tilehuria/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-rabbitmq-endpoint-reader
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-rabbitmq-endpoint-reader
---
# Source: tilehuria/charts/frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-frontend
  labels:
    helm.sh/chart: frontend-0.1.0
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "RELEASE-NAME"
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "RELEASE-NAME"
    role: master
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-hasura
  labels:
    helm.sh/chart: hasura-0.1.0
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: "sticky"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/hasura-backend-plus/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.13
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio
      port: 9000
      targetPort: minio
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/hasura-backend-plus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.1.0
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/hooks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-hooks
  labels:
    helm.sh/chart: hooks-0.1.0
    app.kubernetes.io/name: hooks
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hooks
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-rabbitmq-headless
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-rabbitmq
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/worker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-worker
  labels:
    helm.sh/chart: worker-0.1.0
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: tilehuria/charts/frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-frontend
  labels:
    helm.sh/chart: frontend-0.1.0
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-frontend
      securityContext:
        {}
      containers:
        - name: frontend
          securityContext:
            {}
          image: "platyplus/tilehuria:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-hasura
  labels:
    helm.sh/chart: hasura-0.1.0
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasura
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hasura
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-hasura
      securityContext:
        {}
      containers:
        - name: hasura
          securityContext:
            {}
          image: "platyplus/tilehuria-hasura:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          env:
            - name: HASURA_GRAPHQL_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-postgresql
                  key: url
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: hasuraAdminSecret
            - name: HASURA_GRAPHQL_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: jwt.secret
            - name: EVENT_AOI
              value: http://RELEASE-NAME-hooks/events/area-of-interest
            - name: EVENT_TILE_SET
              value: http://RELEASE-NAME-hooks/events/tile-set
            - name: HOOKS_REMOTE_SCHEMA
              value: http://RELEASE-NAME-hooks/graphql
            - name: HOOKS_URL
              value: http://RELEASE-NAME-hooks
          resources:
            {}
---
# Source: tilehuria/charts/hasura-backend-plus/charts/minio/templates/deployment-standalone.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.13
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  strategy: 
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-3.4.13
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 70b4603668d52d36f48ce99c594dc2dbdd7f0b830c6a55b7b7d013335eb31517
    spec:
      serviceAccountName: RELEASE-NAME-minio
      
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2020.7.2-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: secret-key
            - name: MINIO_DEFAULT_BUCKETS
              value: tilehuria
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          ports:
            - name: minio
              containerPort: 9000
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            httpGet:
              path: /minio/health/live
              port: minio
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            tcpSocket:
              port: minio
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: "data"
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: RELEASE-NAME-minio
---
# Source: tilehuria/charts/hasura-backend-plus/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.1.0
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasura-backend-plus
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hasura-backend-plus
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-hasura-backend-plus
      securityContext:
        {}
      containers:
        - name: hasura-backend-plus
          securityContext:
            {}
          image: "nhost/hasura-backend-plus:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-hasura
                  key: endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: hasuraAdminSecret
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: jwt.key
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-minio
                  key: endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-minio
                  key: defaultBuckets
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: access-key
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: secret-key
            - name: SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME
                  key: serverUrl
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-hasura
                  key: jwt.algorithm
            - name: AUTO_MIGRATE
              value: "false"
            - name: HIBP_ENABLE
              value: "false"
            - name: JWT_CUSTOM_FIELDS
              value: ""
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
---
# Source: tilehuria/charts/hooks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-hooks
  labels:
    helm.sh/chart: hooks-0.1.0
    app.kubernetes.io/name: hooks
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hooks
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hooks
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-hooks
      securityContext:
        {}
      containers:
        - name: hooks
          securityContext:
            {}
          image: "platyplus/tilehuria-hooks:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: RABBITMQ_HOST
              value: "RELEASE-NAME-rabbitmq"
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: rabbitmq-password
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-hasura
                  key: endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: hasuraAdminSecret
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
---
# Source: tilehuria/charts/worker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-worker
  labels:
    helm.sh/chart: worker-0.1.0
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: worker
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: worker
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-worker
      securityContext:
        {}
      containers:
        - name: worker
          securityContext:
            {}
          image: "platyplus/tilehuria-worker:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-minio
                  key: endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-minio
                  key: defaultBuckets
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: access-key
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-minio
                  key: secret-key
            - name: RABBITMQ_HOST
              value: "RELEASE-NAME-rabbitmq"
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: rabbitmq-password
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: RELEASE-NAME-hasura
                  key: endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-hasura
                  key: hasuraAdminSecret
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: "RELEASE-NAME"
    heritage: "Helm"
  annotations:
spec:
  serviceName: RELEASE-NAME-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "RELEASE-NAME"
      role: master
  template:
    metadata:
      name: RELEASE-NAME-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.10.13
        release: "RELEASE-NAME"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: RELEASE-NAME-postgresql
          image: docker.io/bitnami/postgresql:12.3.0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "tilehuria"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "tilehuria" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "tilehuria" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: tilehuria/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-rabbitmq
  namespace: default
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-7.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: RELEASE-NAME-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-7.4.5
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/secret: 8d5df4d1455ba733493415e84889aa3439bc908523bd3d3815adbfc0852faf96
    spec:
      
      serviceAccountName: RELEASE-NAME-rabbitmq
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.5-debian-10-r27
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "RELEASE-NAME-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "false"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
              value: "user"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: RELEASE-NAME-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: RELEASE-NAME
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: tilehuria/charts/hasura-backend-plus/templates/certificate.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: RELEASE-NAME-cert
spec:
  commonName: tilehuria.platyplus.io
  secretName: RELEASE-NAME-cert
  dnsNames:
    - tilehuria.platyplus.io
    - "*.tilehuria.platyplus.io"
  issuerRef:
    name: "letsencrypt-production"
    kind: ClusterIssuer
---
# Source: tilehuria/charts/hasura-backend-plus/templates/cluster-issuer.yaml
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: pilou@platyplus.io
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: issuer-account-key-staging
    solvers:
      - dns01:
          digitalocean:
            tokenSecretRef:
              name: digitalocean-dns
              key: digitalOceanToken
---
# Source: tilehuria/charts/hasura-backend-plus/templates/cluster-issuer.yaml
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: pilou@platyplus.io
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
      - dns01:
          digitalocean:
            tokenSecretRef:
              name: digitalocean-dns
              key: access-token
---
# Source: tilehuria/charts/frontend/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: frontend
  namespace: default
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: "Host(`tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-frontend
          port: 80
---
# Source: tilehuria/charts/frontend/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: frontend-tls
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: "Host(`tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-frontend
          port: 80
  tls:
    secretName: RELEASE-NAME-cert
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: hasura
  namespace: default
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: "Host(`hasura.tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-hasura
          port: 80
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: hasura-tls
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: "Host(`hasura.tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-hasura
          port: 80
  tls:
    secretName: RELEASE-NAME-cert
---
# Source: tilehuria/charts/hasura-backend-plus/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: hasura-backend-plus
  namespace: default
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: "Host(`hbp.tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-hasura-backend-plus
          port: 80
---
# Source: tilehuria/charts/hasura-backend-plus/templates/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: hasura-backend-plus-tls
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: "Host(`hbp.tilehuria.platyplus.io`) && PathPrefix(`/`)"
      services:
        - name: RELEASE-NAME-hasura-backend-plus
          port: 80
  tls:
    secretName: RELEASE-NAME-cert
---
# Source: tilehuria/charts/frontend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-frontend-test-connection"
  labels:
    helm.sh/chart: frontend-0.1.0
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-frontend:80']
  restartPolicy: Never
---
# Source: tilehuria/charts/hasura-backend-plus/charts/hasura/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-hasura-test-connection"
  labels:
    helm.sh/chart: hasura-0.1.0
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-hasura:80']
  restartPolicy: Never
---
# Source: tilehuria/charts/hasura-backend-plus/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-hasura-backend-plus-test-connection"
  labels:
    helm.sh/chart: hasura-backend-plus-0.1.0
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-hasura-backend-plus:80']
  restartPolicy: Never
---
# Source: tilehuria/charts/hooks/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-hooks-test-connection"
  labels:
    helm.sh/chart: hooks-0.1.0
    app.kubernetes.io/name: hooks
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-hooks:80']
  restartPolicy: Never
---
# Source: tilehuria/charts/worker/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-worker-test-connection"
  labels:
    helm.sh/chart: worker-0.1.0
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-worker:80']
  restartPolicy: Never
